# OpenRouter + model routing
openrouter_base_url: "https://openrouter.ai/api/v1"   # OpenAI-compatible endpoint
model: "openai/gpt-5-mini"                  # any OpenRouter model id works
temperature: 0

# LangSmith tracing
langsmith_project: "no-tools-test"

# Demo thread id (preserves conversation history via checkpointer)
thread_id: "demo-thread-001"

# Paths
paths:
  dataset_path: "data/sample.jsonl"  # system prompt file no longer used

# Tools enabled
tools:
  enabled:
    # - coherence_check
    # - thinker
    # - critic
    # - summarizer
    # - worker


# All prompts 
prompts:
  system:
    base: |
      You are a careful MECI annotator. Use tools whenever they can improve correctness.
      - Tools available: coherence_check.
      # - You MUST call the available tools as needed.
      - Keep calling tools until you are confident the solution is correct (no fixed protocol; use judgment).
      - Events are trigger spans only; relations are directional and include cause/enablement/prevention.
      - Final answers must follow the JSON shape requested.

  meci:
    example_json: |
      [
        {"pair":"T0,T1","label":"CauseEffect"}
      ]
    addon: |
      The MECI (Multilingual Event Causality Identification) dataset is designed to annotate causal relations between event triggers in texts across multiple languages, 
      with a strong emphasis on coherence rules to ensure logical consistency. These rules mandate that causal links—labeled as "CauseEffect" (where one event causes, enables, or prevents another) 
      or "EffectCause" (reversing the direction)—must form a directed acyclic graph, avoiding cycles and directional asymmetries (e.g., preventing inconsistent reversals like A causes B while B causes A without justification). 
      Annotations reject mere temporal sequences or correlations, focusing instead on explicit or strongly implicit causal mechanisms, such as enablement or prevention, to maintain a coherent narrative structure within the text's scope. 

      ## Label set (exact strings)
      - "CauseEffect": Ti causes/enables/leads to or prevents the absence of Tj (Ti → Tj).
      - "EffectCause": Tj causes/enables/leads to or prevents the absence of Ti (Tj → Ti).
      - "NoRel": no justified causal link (avoid correlation/temporal-only).

      ## Tool guidance (optional, iterative)
      - You may call any tools, in any order, as many times as useful.
      - Typical but not mandatory uses:
        • coherence_check → detect/fix directional asymmetry or missing reverses
      - Stop when: labels are well-justified, directions are consistent, and all requested pairs are covered.

      ## Decision checklist (apply silently)
      1) Does A change the likelihood/state of B (explicit or strong implicit)? If not, "NoRel".
      2) Pick the best direction (A→B vs B→A); include enablement/prevention as causal.
      3) Reject temporal-only or correlation-only links.
      4) Keep scope within the provided text window.

    user_template: |
      Text:
      {doc_text}

      Pairs to classify (use EXACT pair ids; output order does NOT matter):
      {pair_lines}

      Rules:
      - Labels: "CauseEffect" | "EffectCause" | "NoRel".
      - Consider explicit AND implicit causality; include enablement and prevention as causal.
      - Use tools as needed; you may call multiple tools multiple times until you’re confident.
      - Ensure EVERY requested pair appears exactly once in your final JSON (any order).
      - Return ONLY a JSON array like:
      {example_json}

      Coherence Rules:
      - Symmetry: "Ti,Tj" "CauseEffect" implies that "Tj,Ti" "EffectCause" and inversly
      - Missing: Any relation you leave missing will be considered a NoRel
      - Relations: "Tj,Ti" "NoRel" is not compatible with either "Ti,Tj" "CauseEffect" or "Ti,Tj" "CauseEffect"

  roles:
    thinker: |
      You are Thinker. OPTIONAL planning tool.
      Build a concise plan: evidence spans, mechanism hypotheses, A→B vs B→A tests,
      pitfalls to rule out (temporal-only, correlation-only, reporting). Do NOT output labels.

    critic: |
      You are Critic. OPTIONAL quality-control tool.
      List concrete issues (weak evidence, direction errors, scope creep, label misuse),
      and fixes (flip direction, downgrade to NoRel, mark enablement/prevention).

    summarizer: |
      You are Summarizer. OPTIONAL sanity-check tool.
      TL;DR the causal story (keep <> tags). List strongest links and directions concisely.

    worker: |
      You are Worker. Produce ONLY the final JSON array:
      [
        {"pair":"Ti,Tj","label":"CauseEffect|EffectCause|NoRel"}
      ]
      Use any prior tool outputs as guidance. Ensure all requested pairs are present exactly once.
      Output order is irrelevant. If uncertain after checks, choose "NoRel".
# prompts:
#   system:
#     base: |
#       You are a careful MECI annotator. Use tools whenever they can improve correctness.
#       - Tools available: thinker, critic, summarizer, worker, coherence_check.
#       - You MUST call all the tools 
#       - Keep calling tools until you are confident the solution is correct (no fixed protocol; use judgment).
#       - Events are trigger spans only; relations are directional and include cause/enablement/prevention.
#       - Final answers must follow the JSON shape requested.

#   meci:
#     example_json: |
#       [
#         {"pair":"T0,T1","label":"CauseEffect"}
#       ]
#     addon: |
#       ## Label set (exact strings)
#       - "CauseEffect": Ti causes/enables/leads to or prevents the absence of Tj (Ti → Tj).
#       - "EffectCause": Tj causes/enables/leads to or prevents the absence of Ti (Tj → Ti).
#       - "NoRel": no justified causal link (avoid correlation/temporal-only).

#       ## Tool guidance (optional, iterative)
#       - You may call any tools, in any order, as many times as useful.
#       - Typical but not mandatory uses:
#         • thinker → sketch evidence & direction tests
#         • critic → stress-test weak/ambiguous links
#         • summarizer → sanity-check the causal story
#         • coherence_check → detect/fix directional asymmetry or missing reverses
#         • worker → assemble clean final output
#       - Stop when: labels are well-justified, directions are consistent, and all requested pairs are covered.

#       ## Decision checklist (apply silently)
#       1) Does A change the likelihood/state of B (explicit or strong implicit)? If not, "NoRel".
#       2) Pick the best direction (A→B vs B→A); include enablement/prevention as causal.
#       3) Reject temporal-only or correlation-only links.
#       4) Keep scope within the provided text window.

#     user_template: |
#       Text:
#       {doc_text}

#       Pairs to classify (use EXACT pair ids; output order does NOT matter):
#       {pair_lines}

#       Rules:
#       - Labels: "CauseEffect" | "EffectCause" | "NoRel".
#       - Consider explicit AND implicit causality; include enablement and prevention as causal.
#       - Use tools as needed; you may call multiple tools multiple times until you’re confident.
#       - Ensure EVERY requested pair appears exactly once in your final JSON (any order).
#       - Return ONLY a JSON array like:
#       {example_json}

#   roles:
#     thinker: |
#       You are Thinker. OPTIONAL planning tool.
#       Build a concise plan: evidence spans, mechanism hypotheses, A→B vs B→A tests,
#       pitfalls to rule out (temporal-only, correlation-only, reporting). Do NOT output labels.

#     critic: |
#       You are Critic. OPTIONAL quality-control tool.
#       List concrete issues (weak evidence, direction errors, scope creep, label misuse),
#       and fixes (flip direction, downgrade to NoRel, mark enablement/prevention).

#     summarizer: |
#       You are Summarizer. OPTIONAL sanity-check tool.
#       TL;DR the causal story (keep <> tags). List strongest links and directions concisely.

#     worker: |
#       You are Worker. Produce ONLY the final JSON array:
#       [
#         {"pair":"Ti,Tj","label":"CauseEffect|EffectCause|NoRel"}
#       ]
#       Use any prior tool outputs as guidance. Ensure all requested pairs are present exactly once.
#       Output order is irrelevant. If uncertain after checks, choose "NoRel".
